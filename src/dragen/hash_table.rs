/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const HT_VERSION: u32 = 8;
pub const REF_SEQ_ALIGN_BASES: u32 = 1024;
pub const REF_SEQ_MIN_PAD_BASES: u32 = 256;
pub const REF_SEQ_END_PAD_BASES: u32 = 163840;
pub const REF_SEQ_ALIGN_BASES_POP_ALT: u32 = 1;
pub const REF_SEQ_MIN_PAD_BASES_POP_ALT: u32 = 64;
pub const DEFAULT_MEM_SIZE_STR: &[u8; 5] = b"32GB\0";
pub const MAX_MEM_SIZE_STR: &[u8; 5] = b"64GB\0";
pub const REF_BASES_PER_IDX_RESERVE_BYTE: u32 = 64;
pub const DRAM_FILE_ALIGN_BYTES: u32 = 256;
pub const BASE_PAD: u32 = 0;
pub const BASE_A: u32 = 1;
pub const BASE_C: u32 = 2;
pub const BASE_M_AC: u32 = 3;
pub const BASE_G: u32 = 4;
pub const BASE_R_AG: u32 = 5;
pub const BASE_S_CG: u32 = 6;
pub const BASE_V_ACG: u32 = 7;
pub const BASE_T: u32 = 8;
pub const BASE_W_AT: u32 = 9;
pub const BASE_Y_CT: u32 = 10;
pub const BASE_H_ACT: u32 = 11;
pub const BASE_K_GT: u32 = 12;
pub const BASE_D_AGT: u32 = 13;
pub const BASE_B_CGT: u32 = 14;
pub const BASE_N: u32 = 15;
pub const MAX_REF_SEQS: u32 = 16777215;
pub const THINNING_MAX_PERIOD: u32 = 16;
pub const MAX_SEED_HIT_FREQ: u32 = 256;
pub const MAX_SEED_INDEXES: u32 = 4026531840;
pub const TARGET_OCCUPANCY: f64 = 0.75;
pub const THRESH_OCCUPANCY: f64 = 0.8;
pub const MAPPER_REF_POS_BITS: u32 = 36;
pub const KEY_ANCHOR_OFFSET: u32 = 16;
pub const MIN_ANCHOR_BIN_BITS: u32 = 8;
pub const REF_BASES_PER_SJ_RESERVE_BYTE: u32 = 32;
pub const REF_SEQ_TRIM_GRAN: u32 = 256;
pub const MAX_HASH_TABLE_CHUNKS: u32 = 32;
pub const HASH_OPC_EMPTY: u32 = 240;
pub const HASH_OPC_EXTEND: u32 = 242;
pub const HASH_OPC_CHAIN_BEG_MASK: u32 = 244;
pub const HASH_OPC_CHAIN_BEG_LIST: u32 = 245;
pub const HASH_OPC_CHAIN_CON_MASK: u32 = 246;
pub const HASH_OPC_CHAIN_CON_LIST: u32 = 247;
pub const HASH_OPC_INTERVAL_SL: u32 = 248;
pub const HASH_OPC_INTERVAL_SLE: u32 = 249;
pub const HASH_OPC_INTERVAL_S: u32 = 250;
pub const HASH_OPC_INTERVAL_L: u32 = 251;
pub const HASH_OPC_CHAIN_LIST_FLAG: u32 = 1;
pub const HASH_OPC_SPECIAL_HIT: u32 = 252;
pub const HASH_BUCKET_BYTES_LOG2: u32 = 6;
pub const HASH_BUCKET_BYTES: u32 = 64;
pub const HASH_RECORD_BYTES_LOG2: u32 = 3;
pub const HASH_RECORD_BYTES: u32 = 8;
pub const HASH_EXTRA_BITS: u32 = 3;
pub const MAX_PROBES: u32 = 8;
pub const HASH_RECORDS_PER_BUCKET_LOG2: u32 = 3;
pub const HASH_RECORDS_PER_BUCKET: u32 = 8;
pub const HASH_RECORD_EXT_ID_BITS: u32 = 18;
pub const HASH_RECORD_HASH_BITS: u32 = 23;
pub const EXT_ID_HASH_BITS_MIN: u32 = 3;
pub const EXT_ID_HASH_BITS_MAX: u32 = 24;
pub const HASH_THREADS_LOG2: u32 = 3;
pub const HASH_THREADS: u32 = 8;
pub const BUCKET_THREAD_MASK: u32 = 7;
pub const HASH_BYTE_ADDR_START: u32 = 19;
pub const HASH_BUCKET_ADDR_START: u32 = 25;
pub const ADDR_THREAD_ID_START: u32 = 3;
pub const THREAD_ID_BITS: u32 = 6;
pub const INDEPENDENT_ADDR_BITS: u32 = 30;
pub const INDEPENDENT_HASH_BITS: u32 = 49;
pub const MAX_SEC_CRC_BITS: u32 = 49;
pub const MAX_PRI_SEED_LENGTH: u32 = 30;
pub const MAX_NET_SEED_EXTENSION: u32 = 128;
pub const MAX_EXTENDED_LENGTH: u32 = 158;
pub const MAX_SEED_EXTENSION_INCR: u32 = 12;
pub const SEC_CRC_BITS_MINUS_EXT_ID_HASH_BITS: u32 = 42;
pub const MAX_WRAP_BYTES_LOG2: u32 = 15;
pub const MAX_WRAP_BYTES: u32 = 32768;
pub const CHAIN_BLOCK_BUCKETS_LOG2: u32 = 18;
pub const CHAIN_BLOCK_BUCKETS: u32 = 262144;
pub const CHAIN_LIST_HASH_BITS: u32 = 8;
pub const CHAIN_MASK_HASH_BITS: u32 = 5;
pub const CHAIN_LIST_HASH_MASK: u32 = 255;
pub const CHAIN_MASK_HASH_MASK: u32 = 31;
pub const LIFT_CODE_NONE: u32 = 0;
pub const LIFT_CODE_ALT: u32 = 1;
pub const LIFT_CODE_PRI: u32 = 2;
pub const LIFT_CODE_DIF_PRI: u32 = 3;
pub const HASH_REC_EMPTY_QWORD: u32 = 4026531840;
pub const HASH_REC_CHAIN_TERM_QWORD: u32 = 4127195136;
pub const HASH_REC_POS_SPECIAL: u32 = 4227858432;
pub const HASH_REC_SPECIAL_MASK: u32 = 67108863;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htStrRec_t {
    pub mask: u32,
    pub refId: u32,
    pub begPos: u32,
    pub length: u16,
    pub period: u8,
    pub repeatLen: u8,
}
#[test]
fn bindgen_test_layout_htStrRec_t() {
    const UNINIT: ::std::mem::MaybeUninit<htStrRec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<htStrRec_t>(),
        16usize,
        concat!("Size of: ", stringify!(htStrRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<htStrRec_t>(),
        4usize,
        concat!("Alignment of ", stringify!(htStrRec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(refId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(begPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeatLen) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(repeatLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refRec_t {
    pub name: *mut ::std::os::raw::c_char,
    pub seq: *mut ::std::os::raw::c_char,
    pub str_: *mut htStrRec_t,
    pub lifted: *mut u8,
    pub liftMatch: *mut u8,
    pub seqStart: u64,
    pub seqLen: u32,
    pub begTrim: u32,
    pub endTrim: u32,
    pub trimLen: u32,
    pub endPad: u32,
    pub blockLen: u32,
    pub strNum: u32,
    pub seqNum: i32,
    pub isPri: ::std::os::raw::c_int,
    pub isAlt: ::std::os::raw::c_int,
    pub isDecoy: ::std::os::raw::c_int,
    pub isPopAlt: ::std::os::raw::c_int,
    pub charToBase: *mut ::std::os::raw::c_int,
    pub charToCode: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_refRec_t() {
    const UNINIT: ::std::mem::MaybeUninit<refRec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<refRec_t>(),
        112usize,
        concat!("Size of: ", stringify!(refRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<refRec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(refRec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(lifted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftMatch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(liftMatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begTrim) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(begTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endTrim) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(endTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trimLen) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(trimLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endPad) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(endPad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockLen) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(blockLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strNum) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(strNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqNum) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPri) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isPri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isAlt) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDecoy) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isDecoy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPopAlt) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isPopAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charToBase) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(charToBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charToCode) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(charToCode)
        )
    );
}
extern "C" {
    pub fn refRecCompareName(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const HASH_HEADER_SIZE: ::std::os::raw::c_int = 512;
pub const HashTableType_HT_TYPE_NORMAL: HashTableType = 0;
pub const HashTableType_HT_TYPE_METHYL_G_TO_A: HashTableType = 1;
pub const HashTableType_HT_TYPE_METHYL_C_TO_T: HashTableType = 2;
pub const HashTableType_HT_TYPE_METHYL_COMBINED: HashTableType = 3;
pub const HashTableType_HT_TYPE_ANCHORED: HashTableType = 4;
pub const HashTableType_HT_TYPE_NUM_MAX: HashTableType = 5;
pub type HashTableType = ::std::os::raw::c_uint;
pub const DigestType_DIGEST_CRC32: DigestType = 0;
pub const DigestType_DIGEST_CRC32C: DigestType = 1;
pub type DigestType = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableHeader_t {
    pub hashTableVersion: u32,
    pub hashTableBytes: u64,
    pub priSeedBases: u32,
    pub maxSeedBases: u32,
    pub maxExtIncrement: u32,
    pub refSeedInterval: f64,
    pub tableAddrBits: u32,
    pub tableSize64ths: u32,
    pub maxSeedFreq: u32,
    pub priMaxSeedFreq: u32,
    pub maxSeedFreqLen: u32,
    pub targetSeedFreq: f64,
    pub thinningFreqCap: f64,
    pub thinningPeriod: u32,
    pub priCrcBits: u32,
    pub secCrcBits: u32,
    pub seedLenCost: f64,
    pub seedFreqCost: f64,
    pub extensionCost: f64,
    pub extStepCost: f64,
    pub repairStrategy: u32,
    pub minRepairProb: f64,
    pub anchorBinBits: u32,
    pub hiFreqRandHit: u32,
    pub extRandHitFreq: u32,
    pub priCrcPoly: [u8; 8usize],
    pub secCrcPoly: [u8; 8usize],
    pub refSeqLen: u64,
    pub refLenRaw: u64,
    pub refLenNotN: u64,
    pub digest: u32,
    pub numRefSeqs: u32,
    pub digestType: u32,
    pub refDigest: u32,
    pub refIndexDigest: u32,
    pub hashDigest: u32,
    pub liftoverDigest: u32,
    pub refAltSeed: u32,
    pub refAltStart: u64,
    pub extTabRecs: u32,
    pub extTabDigest: u32,
    pub extRecCost: f64,
    pub minFreqToExtend: u32,
    pub maxMultBaseSeeds: u32,
    pub popSnpsDigest: u32,
    pub liftMatchSeedInt: u32,
    pub padding: [u8; 264usize],
}
#[test]
fn bindgen_test_layout_hashTableHeader_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableHeader_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableHeader_t>(),
        512usize,
        concat!("Size of: ", stringify!(hashTableHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableHeader_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableHeader_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTableVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashTableVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTableBytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashTableBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priSeedBases) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priSeedBases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedBases) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedBases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxExtIncrement) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxExtIncrement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeedInterval) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refSeedInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableAddrBits) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(tableAddrBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableSize64ths) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(tableSize64ths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedFreq) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priMaxSeedFreq) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priMaxSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedFreqLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedFreqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetSeedFreq) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(targetSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinningFreqCap) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(thinningFreqCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinningPeriod) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(thinningPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priCrcBits) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priCrcBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secCrcBits) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(secCrcBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedLenCost) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(seedLenCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedFreqCost) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(seedFreqCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensionCost) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extensionCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extStepCost) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extStepCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repairStrategy) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(repairStrategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRepairProb) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(minRepairProb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchorBinBits) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(anchorBinBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiFreqRandHit) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hiFreqRandHit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extRandHitFreq) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extRandHitFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priCrcPoly) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priCrcPoly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secCrcPoly) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(secCrcPoly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeqLen) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refSeqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refLenRaw) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refLenRaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refLenNotN) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refLenNotN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRefSeqs) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(numRefSeqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestType) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(digestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refDigest) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refIndexDigest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refIndexDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashDigest) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftoverDigest) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(liftoverDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refAltSeed) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refAltSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refAltStart) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refAltStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabRecs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extTabRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabDigest) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extTabDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extRecCost) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extRecCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minFreqToExtend) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(minFreqToExtend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultBaseSeeds) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxMultBaseSeeds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsDigest) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(popSnpsDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftMatchSeedInt) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(liftMatchSeedInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableSeq_t {
    pub seqStart: u64,
    pub begTrim: u32,
    pub endTrim: u32,
    pub seqLen: u32,
}
#[test]
fn bindgen_test_layout_hashTableSeq_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableSeq_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableSeq_t>(),
        20usize,
        concat!("Size of: ", stringify!(hashTableSeq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableSeq_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableSeq_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begTrim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(begTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endTrim) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(endTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(seqLen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableSeqv4_t {
    pub seqStart: u64,
    pub seqLen: u32,
}
#[test]
fn bindgen_test_layout_hashTableSeqv4_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableSeqv4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableSeqv4_t>(),
        12usize,
        concat!("Size of: ", stringify!(hashTableSeqv4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableSeqv4_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableSeqv4_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeqv4_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeqv4_t),
            "::",
            stringify!(seqLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableConfig_t {
    pub hdr: *mut hashTableHeader_t,
    pub refSeq: *mut *mut hashTableSeq_t,
    pub seqName: *mut *mut ::std::os::raw::c_char,
    pub maxThreads: ::std::os::raw::c_int,
    pub maxGB: ::std::os::raw::c_int,
    pub writeHashFile: ::std::os::raw::c_int,
    pub writeCompFile: ::std::os::raw::c_int,
    pub sizeStr: *const ::std::os::raw::c_char,
    pub memSizeStr: *const ::std::os::raw::c_char,
    pub sjSizeStr: *const ::std::os::raw::c_char,
    pub methylatedConv: u32,
    pub extTableAlloc: u32,
    pub priPolyIndex: ::std::os::raw::c_int,
    pub secPolyIndex: ::std::os::raw::c_int,
    pub refInput: *mut ::std::os::raw::c_char,
    pub altLiftover: *mut ::std::os::raw::c_char,
    pub configFname: *mut ::std::os::raw::c_char,
    pub configBinFname: *mut ::std::os::raw::c_char,
    pub hashFname: *mut ::std::os::raw::c_char,
    pub compFname: *mut ::std::os::raw::c_char,
    pub extTabFname: *mut ::std::os::raw::c_char,
    pub refOutput: *mut ::std::os::raw::c_char,
    pub refIdxFname: *mut ::std::os::raw::c_char,
    pub repMaskFname: *mut ::std::os::raw::c_char,
    pub strFname: *mut ::std::os::raw::c_char,
    pub statsFname: *mut ::std::os::raw::c_char,
    pub decoyFname: *mut ::std::os::raw::c_char,
    pub maskBed: *mut ::std::os::raw::c_char,
    pub maskBedDigest: u32,
    pub hostVersion: *mut ::std::os::raw::c_char,
    pub cmdLine: *mut ::std::os::raw::c_char,
    pub overrideCheck: ::std::os::raw::c_int,
    pub testOnly: ::std::os::raw::c_int,
    pub showIntParams: ::std::os::raw::c_int,
    pub readBuf: *mut u8,
    pub usedReadBuf: ::std::os::raw::c_int,
    pub altContigValidate: ::std::os::raw::c_int,
    pub autoDetectValidate: ::std::os::raw::c_int,
    pub autoDetectDir: *const ::std::os::raw::c_char,
    pub popAltContigsFname: *mut ::std::os::raw::c_char,
    pub popAltLiftoverFname: *mut ::std::os::raw::c_char,
    pub popSnpsInput: *mut ::std::os::raw::c_char,
    pub popSnpsOutput: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hashTableConfig_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableConfig_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableConfig_t>(),
        296usize,
        concat!("Size of: ", stringify!(hashTableConfig_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableConfig_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hashTableConfig_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refSeq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(seqName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreads) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maxThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGB) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maxGB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeHashFile) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(writeHashFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeCompFile) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(writeCompFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeStr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(sizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memSizeStr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(memSizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sjSizeStr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(sjSizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methylatedConv) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(methylatedConv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTableAlloc) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(extTableAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priPolyIndex) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(priPolyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secPolyIndex) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(secPolyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refInput) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altLiftover) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(altLiftover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configFname) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(configFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configBinFname) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(configBinFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashFname) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hashFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compFname) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(compFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabFname) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(extTabFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refOutput) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refIdxFname) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refIdxFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repMaskFname) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(repMaskFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strFname) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(strFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statsFname) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(statsFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoyFname) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(decoyFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskBed) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maskBed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskBedDigest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maskBedDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostVersion) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hostVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdLine) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(cmdLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrideCheck) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(overrideCheck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).testOnly) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(testOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showIntParams) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(showIntParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readBuf) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(readBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usedReadBuf) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(usedReadBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altContigValidate) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(altContigValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDetectValidate) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(autoDetectValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDetectDir) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(autoDetectDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popAltContigsFname) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popAltContigsFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popAltLiftoverFname) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popAltLiftoverFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsInput) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popSnpsInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsOutput) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popSnpsOutput)
        )
    );
}
extern "C" {
    pub fn setDefaultHashParams(
        defConfig: *mut hashTableConfig_t,
        dir: *const ::std::os::raw::c_char,
        hashTableType: HashTableType,
    );
}
extern "C" {
    pub fn generateHashTable(
        config: *mut hashTableConfig_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn freeHashParams(config: *mut hashTableConfig_t);
}
extern "C" {
    pub fn AltContigValidate(
        config: *mut hashTableConfig_t,
        refRecs: *const refRec_t,
        numRefSeqs: i32,
    );
}
extern "C" {
    pub static ENCODE_BASE: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static baseCodeBase: [u8; 16usize];
}
extern "C" {
    pub static baseCodeNumBases: [u8; 16usize];
}
extern "C" {
    pub static baseCodeNumBasesMin1: [u8; 16usize];
}
extern "C" {
    pub static mut baseCodeBaseList: [[u8; 4usize]; 16usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_general_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_general_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_general_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_general_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_general_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_general_t))
    );
}
impl hashrec_general_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn hi_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_hi_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        hi_fields: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let hi_fields: u32 = unsafe { ::std::mem::transmute(hi_fields) };
            hi_fields as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_matchable_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_matchable_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_matchable_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_matchable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_matchable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_matchable_t))
    );
}
impl hashrec_matchable_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        rc: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_match_bits_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_match_bits_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_match_bits_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_match_bits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_match_bits_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_match_bits_t))
    );
}
impl hashrec_match_bits_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn match_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_match_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        rc: u32,
        lf: u32,
        match_bits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 30u8, {
            let match_bits: u32 = unsafe { ::std::mem::transmute(match_bits) };
            match_bits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_hit_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_hit_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_hit_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_hit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_hit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_hit_t))
    );
}
impl hashrec_hit_t {
    #[inline]
    pub fn pos(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pos(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pos: u32,
        rc: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let pos: u32 = unsafe { ::std::mem::transmute(pos) };
            pos as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_extend_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_extend_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_extend_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_extend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_extend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_extend_t))
    );
}
impl hashrec_extend_t {
    #[inline]
    pub fn extend_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_extend_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn extend_len(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_extend_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn al(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_al(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        extend_id: u32,
        extend_len: u32,
        al: u32,
        rf: u32,
        opcode: u32,
        rs: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let extend_id: u32 = unsafe { ::std::mem::transmute(extend_id) };
            extend_id as u64
        });
        __bindgen_bitfield_unit.set(18usize, 4u8, {
            let extend_len: u32 = unsafe { ::std::mem::transmute(extend_len) };
            extend_len as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let al: u32 = unsafe { ::std::mem::transmute(al) };
            al as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let rf: u32 = unsafe { ::std::mem::transmute(rf) };
            rf as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rs: u32 = unsafe { ::std::mem::transmute(rs) };
            rs as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sl0_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sl0_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sl0_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sl0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sl0_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sl0_t))
    );
}
impl hashrec_interval_sl0_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fmt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fmt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        opcode: u32,
        fmt: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(15usize, 9u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let fmt: u32 = unsafe { ::std::mem::transmute(fmt) };
            fmt as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sl1_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sl1_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sl1_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sl1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sl1_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sl1_t))
    );
}
impl hashrec_interval_sl1_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fmt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fmt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        opcode: u32,
        fmt: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(8usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let fmt: u32 = unsafe { ::std::mem::transmute(fmt) };
            fmt as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sle_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sle_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sle_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sle_t))
    );
}
impl hashrec_interval_sle_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn exlifts(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_exlifts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn msb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        exlifts: u32,
        opcode: u32,
        msb: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let exlifts: u32 = unsafe { ::std::mem::transmute(exlifts) };
            exlifts as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let msb: u32 = unsafe { ::std::mem::transmute(msb) };
            msb as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_st_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_st_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_st_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_st_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_st_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_st_t))
    );
}
impl hashrec_interval_st_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn carry(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carry(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        opcode: u32,
        carry: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let carry: u32 = unsafe { ::std::mem::transmute(carry) };
            carry as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_ln_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_ln_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_ln_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_ln_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_ln_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_ln_t))
    );
}
impl hashrec_interval_ln_t {
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        length: u32,
        opcode: u32,
        rsvd: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rsvd: u32 = unsafe { ::std::mem::transmute(rsvd) };
            rsvd as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_chain_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_chain_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_chain_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_chain_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_chain_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_chain_t))
    );
}
impl hashrec_chain_t {
    #[inline]
    pub fn chain_ptr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_chain_ptr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn chain_pad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_chain_pad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chain_ptr: u32,
        chain_pad: u32,
        opcode: u32,
        filter: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let chain_ptr: u32 = unsafe { ::std::mem::transmute(chain_ptr) };
            chain_ptr as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let chain_pad: u32 = unsafe { ::std::mem::transmute(chain_pad) };
            chain_pad as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let filter: u32 = unsafe { ::std::mem::transmute(filter) };
            filter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_chain_list_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub filter_list: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_hashrec_chain_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashrec_chain_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashrec_chain_list_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_chain_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_chain_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_chain_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_list) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_chain_list_t),
            "::",
            stringify!(filter_list)
        )
    );
}
impl hashrec_chain_list_t {
    #[inline]
    pub fn chain_ptr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_chain_ptr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn chain_pad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_chain_pad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chain_ptr: u32,
        chain_pad: u32,
        opcode: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let chain_ptr: u32 = unsafe { ::std::mem::transmute(chain_ptr) };
            chain_ptr as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let chain_pad: u32 = unsafe { ::std::mem::transmute(chain_pad) };
            chain_pad as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hashrec_t {
    pub general: hashrec_general_t,
    pub matchable: hashrec_matchable_t,
    pub match_bits: hashrec_match_bits_t,
    pub hit: hashrec_hit_t,
    pub extend: hashrec_extend_t,
    pub interval_sl0: hashrec_interval_sl0_t,
    pub interval_sl1: hashrec_interval_sl1_t,
    pub interval_sle: hashrec_interval_sle_t,
    pub interval_st: hashrec_interval_st_t,
    pub interval_ln: hashrec_interval_ln_t,
    pub chain: hashrec_chain_t,
    pub chain_list: hashrec_chain_list_t,
    pub qword: u64,
}
#[test]
fn bindgen_test_layout_hashrec_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashrec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashrec_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hashrec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(general)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matchable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(matchable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(match_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(extend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sl0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sl0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_ln) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_ln)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(chain_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qword) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(qword)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extend_hit_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_extend_hit_t() {
    assert_eq!(
        ::std::mem::size_of::<extend_hit_t>(),
        8usize,
        concat!("Size of: ", stringify!(extend_hit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<extend_hit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(extend_hit_t))
    );
}
impl extend_hit_t {
    #[inline]
    pub fn pos(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pos(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lift_code(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lift_code(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lift_group(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_lift_group(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn literal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_literal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pos: u32,
        rc: u32,
        lift_code: u32,
        lift_group: u32,
        literal: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let pos: u32 = unsafe { ::std::mem::transmute(pos) };
            pos as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 2u8, {
            let lift_code: u32 = unsafe { ::std::mem::transmute(lift_code) };
            lift_code as u64
        });
        __bindgen_bitfield_unit.set(35usize, 28u8, {
            let lift_group: u32 = unsafe { ::std::mem::transmute(lift_group) };
            lift_group as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let literal: u32 = unsafe { ::std::mem::transmute(literal) };
            literal as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn buildHashTable(
        config: *mut hashTableConfig_t,
        refSeq: *mut u8,
        refCodeHist: *mut u64,
        refMask: *mut u8,
        refCode: *mut u8,
        altMatches: *mut u8,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn copyBases(
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        srcOffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn revComp(
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qwordExtractBits(
        hash: u64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn hashRecExtractHashBits(
        rec: hashrec_t,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn bytesReadable(bytes: u64) -> *mut ::std::os::raw::c_char;
}
