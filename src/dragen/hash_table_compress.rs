/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const HT_VERSION: u32 = 8;
pub const REF_SEQ_ALIGN_BASES: u32 = 1024;
pub const REF_SEQ_MIN_PAD_BASES: u32 = 256;
pub const REF_SEQ_END_PAD_BASES: u32 = 163840;
pub const REF_SEQ_ALIGN_BASES_POP_ALT: u32 = 1;
pub const REF_SEQ_MIN_PAD_BASES_POP_ALT: u32 = 64;
pub const DEFAULT_MEM_SIZE_STR: &[u8; 5] = b"32GB\0";
pub const MAX_MEM_SIZE_STR: &[u8; 5] = b"64GB\0";
pub const REF_BASES_PER_IDX_RESERVE_BYTE: u32 = 64;
pub const DRAM_FILE_ALIGN_BYTES: u32 = 256;
pub const BASE_PAD: u32 = 0;
pub const BASE_A: u32 = 1;
pub const BASE_C: u32 = 2;
pub const BASE_M_AC: u32 = 3;
pub const BASE_G: u32 = 4;
pub const BASE_R_AG: u32 = 5;
pub const BASE_S_CG: u32 = 6;
pub const BASE_V_ACG: u32 = 7;
pub const BASE_T: u32 = 8;
pub const BASE_W_AT: u32 = 9;
pub const BASE_Y_CT: u32 = 10;
pub const BASE_H_ACT: u32 = 11;
pub const BASE_K_GT: u32 = 12;
pub const BASE_D_AGT: u32 = 13;
pub const BASE_B_CGT: u32 = 14;
pub const BASE_N: u32 = 15;
pub const MAX_REF_SEQS: u32 = 16777215;
pub const THINNING_MAX_PERIOD: u32 = 16;
pub const MAX_SEED_HIT_FREQ: u32 = 256;
pub const MAX_SEED_INDEXES: u32 = 4026531840;
pub const TARGET_OCCUPANCY: f64 = 0.75;
pub const THRESH_OCCUPANCY: f64 = 0.8;
pub const MAPPER_REF_POS_BITS: u32 = 36;
pub const KEY_ANCHOR_OFFSET: u32 = 16;
pub const MIN_ANCHOR_BIN_BITS: u32 = 8;
pub const REF_BASES_PER_SJ_RESERVE_BYTE: u32 = 32;
pub const REF_SEQ_TRIM_GRAN: u32 = 256;
pub const MAX_HASH_TABLE_CHUNKS: u32 = 32;
pub const HASH_OPC_EMPTY: u32 = 240;
pub const HASH_OPC_EXTEND: u32 = 242;
pub const HASH_OPC_CHAIN_BEG_MASK: u32 = 244;
pub const HASH_OPC_CHAIN_BEG_LIST: u32 = 245;
pub const HASH_OPC_CHAIN_CON_MASK: u32 = 246;
pub const HASH_OPC_CHAIN_CON_LIST: u32 = 247;
pub const HASH_OPC_INTERVAL_SL: u32 = 248;
pub const HASH_OPC_INTERVAL_SLE: u32 = 249;
pub const HASH_OPC_INTERVAL_S: u32 = 250;
pub const HASH_OPC_INTERVAL_L: u32 = 251;
pub const HASH_OPC_CHAIN_LIST_FLAG: u32 = 1;
pub const HASH_OPC_SPECIAL_HIT: u32 = 252;
pub const HASH_BUCKET_BYTES_LOG2: u32 = 6;
pub const HASH_BUCKET_BYTES: u32 = 64;
pub const HASH_RECORD_BYTES_LOG2: u32 = 3;
pub const HASH_RECORD_BYTES: u32 = 8;
pub const HASH_EXTRA_BITS: u32 = 3;
pub const MAX_PROBES: u32 = 8;
pub const HASH_RECORDS_PER_BUCKET_LOG2: u32 = 3;
pub const HASH_RECORDS_PER_BUCKET: u32 = 8;
pub const HASH_RECORD_EXT_ID_BITS: u32 = 18;
pub const HASH_RECORD_HASH_BITS: u32 = 23;
pub const EXT_ID_HASH_BITS_MIN: u32 = 3;
pub const EXT_ID_HASH_BITS_MAX: u32 = 24;
pub const HASH_THREADS_LOG2: u32 = 3;
pub const HASH_THREADS: u32 = 8;
pub const BUCKET_THREAD_MASK: u32 = 7;
pub const HASH_BYTE_ADDR_START: u32 = 19;
pub const HASH_BUCKET_ADDR_START: u32 = 25;
pub const ADDR_THREAD_ID_START: u32 = 3;
pub const THREAD_ID_BITS: u32 = 6;
pub const INDEPENDENT_ADDR_BITS: u32 = 30;
pub const INDEPENDENT_HASH_BITS: u32 = 49;
pub const MAX_SEC_CRC_BITS: u32 = 49;
pub const MAX_PRI_SEED_LENGTH: u32 = 30;
pub const MAX_NET_SEED_EXTENSION: u32 = 128;
pub const MAX_EXTENDED_LENGTH: u32 = 158;
pub const MAX_SEED_EXTENSION_INCR: u32 = 12;
pub const SEC_CRC_BITS_MINUS_EXT_ID_HASH_BITS: u32 = 42;
pub const MAX_WRAP_BYTES_LOG2: u32 = 15;
pub const MAX_WRAP_BYTES: u32 = 32768;
pub const CHAIN_BLOCK_BUCKETS_LOG2: u32 = 18;
pub const CHAIN_BLOCK_BUCKETS: u32 = 262144;
pub const CHAIN_LIST_HASH_BITS: u32 = 8;
pub const CHAIN_MASK_HASH_BITS: u32 = 5;
pub const CHAIN_LIST_HASH_MASK: u32 = 255;
pub const CHAIN_MASK_HASH_MASK: u32 = 31;
pub const LIFT_CODE_NONE: u32 = 0;
pub const LIFT_CODE_ALT: u32 = 1;
pub const LIFT_CODE_PRI: u32 = 2;
pub const LIFT_CODE_DIF_PRI: u32 = 3;
pub const HASH_REC_EMPTY_QWORD: u32 = 4026531840;
pub const HASH_REC_CHAIN_TERM_QWORD: u32 = 4127195136;
pub const HASH_REC_POS_SPECIAL: u32 = 4227858432;
pub const HASH_REC_SPECIAL_MASK: u32 = 67108863;
pub const COMP_MAGIC: u32 = 4170912717;
pub const COMP_VERSION: u32 = 2;
pub const COMP_NOLITERAL_RUN_BITS: u32 = 6;
pub const COMP_NOLITERAL_RUN_LIMIT: u32 = 63;
pub const COMP_EXT_NOLITERAL_RUN_BITS: u32 = 10;
pub const COMP_EXT_NOLITERAL_RUN_LIMIT: u32 = 1023;
pub const EXTTAB_INDEX_BUCKET_BITS: u32 = 8;
pub const SEED_POP_REC_SLOT_OFFSET_BITS: u32 = 21;
pub const SEED_POP_REC_BUCKET_BIN_BITS: u32 = 22;
pub const SEED_POP_REC_LIFT_GROUP_BITS: u32 = 17;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htStrRec_t {
    pub mask: u32,
    pub refId: u32,
    pub begPos: u32,
    pub length: u16,
    pub period: u8,
    pub repeatLen: u8,
}
#[test]
fn bindgen_test_layout_htStrRec_t() {
    const UNINIT: ::std::mem::MaybeUninit<htStrRec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<htStrRec_t>(),
        16usize,
        concat!("Size of: ", stringify!(htStrRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<htStrRec_t>(),
        4usize,
        concat!("Alignment of ", stringify!(htStrRec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(refId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(begPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeatLen) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(htStrRec_t),
            "::",
            stringify!(repeatLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refRec_t {
    pub name: *mut ::std::os::raw::c_char,
    pub seq: *mut ::std::os::raw::c_char,
    pub str_: *mut htStrRec_t,
    pub lifted: *mut u8,
    pub liftMatch: *mut u8,
    pub seqStart: u64,
    pub seqLen: u32,
    pub begTrim: u32,
    pub endTrim: u32,
    pub trimLen: u32,
    pub endPad: u32,
    pub blockLen: u32,
    pub strNum: u32,
    pub seqNum: i32,
    pub isPri: ::std::os::raw::c_int,
    pub isAlt: ::std::os::raw::c_int,
    pub isDecoy: ::std::os::raw::c_int,
    pub isPopAlt: ::std::os::raw::c_int,
    pub charToBase: *mut ::std::os::raw::c_int,
    pub charToCode: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_refRec_t() {
    const UNINIT: ::std::mem::MaybeUninit<refRec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<refRec_t>(),
        112usize,
        concat!("Size of: ", stringify!(refRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<refRec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(refRec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(lifted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftMatch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(liftMatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begTrim) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(begTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endTrim) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(endTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trimLen) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(trimLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endPad) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(endPad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockLen) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(blockLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strNum) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(strNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqNum) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(seqNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPri) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isPri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isAlt) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDecoy) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isDecoy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPopAlt) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(isPopAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charToBase) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(charToBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charToCode) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(refRec_t),
            "::",
            stringify!(charToCode)
        )
    );
}
extern "C" {
    pub fn refRecCompareName(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const HASH_HEADER_SIZE: ::std::os::raw::c_int = 512;
pub const HashTableType_HT_TYPE_NORMAL: HashTableType = 0;
pub const HashTableType_HT_TYPE_METHYL_G_TO_A: HashTableType = 1;
pub const HashTableType_HT_TYPE_METHYL_C_TO_T: HashTableType = 2;
pub const HashTableType_HT_TYPE_METHYL_COMBINED: HashTableType = 3;
pub const HashTableType_HT_TYPE_ANCHORED: HashTableType = 4;
pub const HashTableType_HT_TYPE_NUM_MAX: HashTableType = 5;
pub type HashTableType = ::std::os::raw::c_uint;
pub const DigestType_DIGEST_CRC32: DigestType = 0;
pub const DigestType_DIGEST_CRC32C: DigestType = 1;
pub type DigestType = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableHeader_t {
    pub hashTableVersion: u32,
    pub hashTableBytes: u64,
    pub priSeedBases: u32,
    pub maxSeedBases: u32,
    pub maxExtIncrement: u32,
    pub refSeedInterval: f64,
    pub tableAddrBits: u32,
    pub tableSize64ths: u32,
    pub maxSeedFreq: u32,
    pub priMaxSeedFreq: u32,
    pub maxSeedFreqLen: u32,
    pub targetSeedFreq: f64,
    pub thinningFreqCap: f64,
    pub thinningPeriod: u32,
    pub priCrcBits: u32,
    pub secCrcBits: u32,
    pub seedLenCost: f64,
    pub seedFreqCost: f64,
    pub extensionCost: f64,
    pub extStepCost: f64,
    pub repairStrategy: u32,
    pub minRepairProb: f64,
    pub anchorBinBits: u32,
    pub hiFreqRandHit: u32,
    pub extRandHitFreq: u32,
    pub priCrcPoly: [u8; 8usize],
    pub secCrcPoly: [u8; 8usize],
    pub refSeqLen: u64,
    pub refLenRaw: u64,
    pub refLenNotN: u64,
    pub digest: u32,
    pub numRefSeqs: u32,
    pub digestType: u32,
    pub refDigest: u32,
    pub refIndexDigest: u32,
    pub hashDigest: u32,
    pub liftoverDigest: u32,
    pub refAltSeed: u32,
    pub refAltStart: u64,
    pub extTabRecs: u32,
    pub extTabDigest: u32,
    pub extRecCost: f64,
    pub minFreqToExtend: u32,
    pub maxMultBaseSeeds: u32,
    pub popSnpsDigest: u32,
    pub liftMatchSeedInt: u32,
    pub padding: [u8; 264usize],
}
#[test]
fn bindgen_test_layout_hashTableHeader_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableHeader_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableHeader_t>(),
        512usize,
        concat!("Size of: ", stringify!(hashTableHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableHeader_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableHeader_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTableVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashTableVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTableBytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashTableBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priSeedBases) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priSeedBases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedBases) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedBases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxExtIncrement) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxExtIncrement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeedInterval) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refSeedInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableAddrBits) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(tableAddrBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableSize64ths) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(tableSize64ths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedFreq) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priMaxSeedFreq) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priMaxSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeedFreqLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxSeedFreqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetSeedFreq) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(targetSeedFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinningFreqCap) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(thinningFreqCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinningPeriod) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(thinningPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priCrcBits) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priCrcBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secCrcBits) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(secCrcBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedLenCost) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(seedLenCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedFreqCost) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(seedFreqCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensionCost) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extensionCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extStepCost) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extStepCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repairStrategy) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(repairStrategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRepairProb) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(minRepairProb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchorBinBits) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(anchorBinBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiFreqRandHit) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hiFreqRandHit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extRandHitFreq) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extRandHitFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priCrcPoly) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(priCrcPoly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secCrcPoly) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(secCrcPoly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeqLen) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refSeqLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refLenRaw) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refLenRaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refLenNotN) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refLenNotN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRefSeqs) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(numRefSeqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestType) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(digestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refDigest) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refIndexDigest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refIndexDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashDigest) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(hashDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftoverDigest) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(liftoverDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refAltSeed) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refAltSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refAltStart) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(refAltStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabRecs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extTabRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabDigest) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extTabDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extRecCost) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(extRecCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minFreqToExtend) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(minFreqToExtend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultBaseSeeds) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(maxMultBaseSeeds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsDigest) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(popSnpsDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liftMatchSeedInt) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(liftMatchSeedInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableHeader_t),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableSeq_t {
    pub seqStart: u64,
    pub begTrim: u32,
    pub endTrim: u32,
    pub seqLen: u32,
}
#[test]
fn bindgen_test_layout_hashTableSeq_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableSeq_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableSeq_t>(),
        20usize,
        concat!("Size of: ", stringify!(hashTableSeq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableSeq_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableSeq_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begTrim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(begTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endTrim) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(endTrim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeq_t),
            "::",
            stringify!(seqLen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableSeqv4_t {
    pub seqStart: u64,
    pub seqLen: u32,
}
#[test]
fn bindgen_test_layout_hashTableSeqv4_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableSeqv4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableSeqv4_t>(),
        12usize,
        concat!("Size of: ", stringify!(hashTableSeqv4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableSeqv4_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hashTableSeqv4_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeqv4_t),
            "::",
            stringify!(seqStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableSeqv4_t),
            "::",
            stringify!(seqLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashTableConfig_t {
    pub hdr: *mut hashTableHeader_t,
    pub refSeq: *mut *mut hashTableSeq_t,
    pub seqName: *mut *mut ::std::os::raw::c_char,
    pub maxThreads: ::std::os::raw::c_int,
    pub maxGB: ::std::os::raw::c_int,
    pub writeHashFile: ::std::os::raw::c_int,
    pub writeCompFile: ::std::os::raw::c_int,
    pub sizeStr: *const ::std::os::raw::c_char,
    pub memSizeStr: *const ::std::os::raw::c_char,
    pub sjSizeStr: *const ::std::os::raw::c_char,
    pub methylatedConv: u32,
    pub extTableAlloc: u32,
    pub priPolyIndex: ::std::os::raw::c_int,
    pub secPolyIndex: ::std::os::raw::c_int,
    pub refInput: *mut ::std::os::raw::c_char,
    pub altLiftover: *mut ::std::os::raw::c_char,
    pub configFname: *mut ::std::os::raw::c_char,
    pub configBinFname: *mut ::std::os::raw::c_char,
    pub hashFname: *mut ::std::os::raw::c_char,
    pub compFname: *mut ::std::os::raw::c_char,
    pub extTabFname: *mut ::std::os::raw::c_char,
    pub refOutput: *mut ::std::os::raw::c_char,
    pub refIdxFname: *mut ::std::os::raw::c_char,
    pub repMaskFname: *mut ::std::os::raw::c_char,
    pub strFname: *mut ::std::os::raw::c_char,
    pub statsFname: *mut ::std::os::raw::c_char,
    pub decoyFname: *mut ::std::os::raw::c_char,
    pub maskBed: *mut ::std::os::raw::c_char,
    pub maskBedDigest: u32,
    pub hostVersion: *mut ::std::os::raw::c_char,
    pub cmdLine: *mut ::std::os::raw::c_char,
    pub overrideCheck: ::std::os::raw::c_int,
    pub testOnly: ::std::os::raw::c_int,
    pub showIntParams: ::std::os::raw::c_int,
    pub readBuf: *mut u8,
    pub usedReadBuf: ::std::os::raw::c_int,
    pub altContigValidate: ::std::os::raw::c_int,
    pub autoDetectValidate: ::std::os::raw::c_int,
    pub autoDetectDir: *const ::std::os::raw::c_char,
    pub popAltContigsFname: *mut ::std::os::raw::c_char,
    pub popAltLiftoverFname: *mut ::std::os::raw::c_char,
    pub popSnpsInput: *mut ::std::os::raw::c_char,
    pub popSnpsOutput: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hashTableConfig_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashTableConfig_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashTableConfig_t>(),
        296usize,
        concat!("Size of: ", stringify!(hashTableConfig_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashTableConfig_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hashTableConfig_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refSeq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refSeq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(seqName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreads) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maxThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGB) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maxGB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeHashFile) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(writeHashFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeCompFile) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(writeCompFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeStr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(sizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memSizeStr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(memSizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sjSizeStr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(sjSizeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methylatedConv) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(methylatedConv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTableAlloc) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(extTableAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priPolyIndex) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(priPolyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secPolyIndex) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(secPolyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refInput) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altLiftover) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(altLiftover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configFname) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(configFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configBinFname) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(configBinFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashFname) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hashFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compFname) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(compFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabFname) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(extTabFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refOutput) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refIdxFname) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(refIdxFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repMaskFname) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(repMaskFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strFname) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(strFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statsFname) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(statsFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoyFname) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(decoyFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskBed) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maskBed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskBedDigest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(maskBedDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostVersion) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(hostVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdLine) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(cmdLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrideCheck) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(overrideCheck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).testOnly) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(testOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showIntParams) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(showIntParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readBuf) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(readBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usedReadBuf) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(usedReadBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altContigValidate) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(altContigValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDetectValidate) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(autoDetectValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDetectDir) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(autoDetectDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popAltContigsFname) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popAltContigsFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popAltLiftoverFname) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popAltLiftoverFname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsInput) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popSnpsInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popSnpsOutput) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(hashTableConfig_t),
            "::",
            stringify!(popSnpsOutput)
        )
    );
}
extern "C" {
    pub fn setDefaultHashParams(
        defConfig: *mut hashTableConfig_t,
        dir: *const ::std::os::raw::c_char,
        hashTableType: HashTableType,
    );
}
extern "C" {
    pub fn generateHashTable(
        config: *mut hashTableConfig_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn freeHashParams(config: *mut hashTableConfig_t);
}
extern "C" {
    pub fn AltContigValidate(
        config: *mut hashTableConfig_t,
        refRecs: *const refRec_t,
        numRefSeqs: i32,
    );
}
extern "C" {
    pub static ENCODE_BASE: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static baseCodeBase: [u8; 16usize];
}
extern "C" {
    pub static baseCodeNumBases: [u8; 16usize];
}
extern "C" {
    pub static baseCodeNumBasesMin1: [u8; 16usize];
}
extern "C" {
    pub static mut baseCodeBaseList: [[u8; 4usize]; 16usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_general_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_general_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_general_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_general_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_general_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_general_t))
    );
}
impl hashrec_general_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn hi_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_hi_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        hi_fields: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let hi_fields: u32 = unsafe { ::std::mem::transmute(hi_fields) };
            hi_fields as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_matchable_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_matchable_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_matchable_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_matchable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_matchable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_matchable_t))
    );
}
impl hashrec_matchable_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        rc: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_match_bits_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_match_bits_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_match_bits_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_match_bits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_match_bits_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_match_bits_t))
    );
}
impl hashrec_match_bits_t {
    #[inline]
    pub fn lo_fields(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_lo_fields(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn match_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_match_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lo_fields: u32,
        opcode: u32,
        rc: u32,
        lf: u32,
        match_bits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let lo_fields: u32 = unsafe { ::std::mem::transmute(lo_fields) };
            lo_fields as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 30u8, {
            let match_bits: u32 = unsafe { ::std::mem::transmute(match_bits) };
            match_bits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_hit_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_hit_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_hit_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_hit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_hit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_hit_t))
    );
}
impl hashrec_hit_t {
    #[inline]
    pub fn pos(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pos(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pos: u32,
        rc: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let pos: u32 = unsafe { ::std::mem::transmute(pos) };
            pos as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_extend_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_extend_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_extend_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_extend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_extend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_extend_t))
    );
}
impl hashrec_extend_t {
    #[inline]
    pub fn extend_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_extend_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn extend_len(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_extend_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn al(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_al(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        extend_id: u32,
        extend_len: u32,
        al: u32,
        rf: u32,
        opcode: u32,
        rs: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let extend_id: u32 = unsafe { ::std::mem::transmute(extend_id) };
            extend_id as u64
        });
        __bindgen_bitfield_unit.set(18usize, 4u8, {
            let extend_len: u32 = unsafe { ::std::mem::transmute(extend_len) };
            extend_len as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let al: u32 = unsafe { ::std::mem::transmute(al) };
            al as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let rf: u32 = unsafe { ::std::mem::transmute(rf) };
            rf as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rs: u32 = unsafe { ::std::mem::transmute(rs) };
            rs as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sl0_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sl0_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sl0_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sl0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sl0_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sl0_t))
    );
}
impl hashrec_interval_sl0_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fmt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fmt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        opcode: u32,
        fmt: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(15usize, 9u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let fmt: u32 = unsafe { ::std::mem::transmute(fmt) };
            fmt as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sl1_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sl1_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sl1_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sl1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sl1_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sl1_t))
    );
}
impl hashrec_interval_sl1_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fmt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fmt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        opcode: u32,
        fmt: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(8usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let fmt: u32 = unsafe { ::std::mem::transmute(fmt) };
            fmt as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_sle_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_sle_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_sle_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_sle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_sle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_sle_t))
    );
}
impl hashrec_interval_sle_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn exlifts(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_exlifts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn msb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        length: u32,
        exlifts: u32,
        opcode: u32,
        msb: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let exlifts: u32 = unsafe { ::std::mem::transmute(exlifts) };
            exlifts as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let msb: u32 = unsafe { ::std::mem::transmute(msb) };
            msb as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_st_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_st_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_st_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_st_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_st_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_st_t))
    );
}
impl hashrec_interval_st_t {
    #[inline]
    pub fn start(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn carry(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carry(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: u32,
        opcode: u32,
        carry: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let start: u32 = unsafe { ::std::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let carry: u32 = unsafe { ::std::mem::transmute(carry) };
            carry as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_interval_ln_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_interval_ln_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_interval_ln_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_interval_ln_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_interval_ln_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_interval_ln_t))
    );
}
impl hashrec_interval_ln_t {
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_hash_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_thread_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        length: u32,
        opcode: u32,
        rsvd: u32,
        lf: u32,
        ex: u32,
        hash_bits: u32,
        thread_id: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rsvd: u32 = unsafe { ::std::mem::transmute(rsvd) };
            rsvd as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let lf: u32 = unsafe { ::std::mem::transmute(lf) };
            lf as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let ex: u32 = unsafe { ::std::mem::transmute(ex) };
            ex as u64
        });
        __bindgen_bitfield_unit.set(35usize, 23u8, {
            let hash_bits: u32 = unsafe { ::std::mem::transmute(hash_bits) };
            hash_bits as u64
        });
        __bindgen_bitfield_unit.set(58usize, 6u8, {
            let thread_id: u32 = unsafe { ::std::mem::transmute(thread_id) };
            thread_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_chain_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_hashrec_chain_t() {
    assert_eq!(
        ::std::mem::size_of::<hashrec_chain_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_chain_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_chain_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_chain_t))
    );
}
impl hashrec_chain_t {
    #[inline]
    pub fn chain_ptr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_chain_ptr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn chain_pad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_chain_pad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chain_ptr: u32,
        chain_pad: u32,
        opcode: u32,
        filter: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let chain_ptr: u32 = unsafe { ::std::mem::transmute(chain_ptr) };
            chain_ptr as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let chain_pad: u32 = unsafe { ::std::mem::transmute(chain_pad) };
            chain_pad as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let filter: u32 = unsafe { ::std::mem::transmute(filter) };
            filter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashrec_chain_list_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub filter_list: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_hashrec_chain_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashrec_chain_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashrec_chain_list_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_chain_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_chain_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hashrec_chain_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_list) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_chain_list_t),
            "::",
            stringify!(filter_list)
        )
    );
}
impl hashrec_chain_list_t {
    #[inline]
    pub fn chain_ptr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_chain_ptr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn chain_pad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_chain_pad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chain_ptr: u32,
        chain_pad: u32,
        opcode: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let chain_ptr: u32 = unsafe { ::std::mem::transmute(chain_ptr) };
            chain_ptr as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let chain_pad: u32 = unsafe { ::std::mem::transmute(chain_pad) };
            chain_pad as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hashrec_t {
    pub general: hashrec_general_t,
    pub matchable: hashrec_matchable_t,
    pub match_bits: hashrec_match_bits_t,
    pub hit: hashrec_hit_t,
    pub extend: hashrec_extend_t,
    pub interval_sl0: hashrec_interval_sl0_t,
    pub interval_sl1: hashrec_interval_sl1_t,
    pub interval_sle: hashrec_interval_sle_t,
    pub interval_st: hashrec_interval_st_t,
    pub interval_ln: hashrec_interval_ln_t,
    pub chain: hashrec_chain_t,
    pub chain_list: hashrec_chain_list_t,
    pub qword: u64,
}
#[test]
fn bindgen_test_layout_hashrec_t() {
    const UNINIT: ::std::mem::MaybeUninit<hashrec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashrec_t>(),
        8usize,
        concat!("Size of: ", stringify!(hashrec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hashrec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hashrec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(general)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matchable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(matchable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(match_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(extend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sl0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sl0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_sle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_sle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_ln) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(interval_ln)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(chain_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qword) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashrec_t),
            "::",
            stringify!(qword)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extend_hit_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_extend_hit_t() {
    assert_eq!(
        ::std::mem::size_of::<extend_hit_t>(),
        8usize,
        concat!("Size of: ", stringify!(extend_hit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<extend_hit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(extend_hit_t))
    );
}
impl extend_hit_t {
    #[inline]
    pub fn pos(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pos(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn rc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lift_code(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lift_code(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lift_group(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_lift_group(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn literal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_literal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pos: u32,
        rc: u32,
        lift_code: u32,
        lift_group: u32,
        literal: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let pos: u32 = unsafe { ::std::mem::transmute(pos) };
            pos as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let rc: u32 = unsafe { ::std::mem::transmute(rc) };
            rc as u64
        });
        __bindgen_bitfield_unit.set(33usize, 2u8, {
            let lift_code: u32 = unsafe { ::std::mem::transmute(lift_code) };
            lift_code as u64
        });
        __bindgen_bitfield_unit.set(35usize, 28u8, {
            let lift_group: u32 = unsafe { ::std::mem::transmute(lift_group) };
            lift_group as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let literal: u32 = unsafe { ::std::mem::transmute(literal) };
            literal as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn buildHashTable(
        config: *mut hashTableConfig_t,
        refSeq: *mut u8,
        refCodeHist: *mut u64,
        refMask: *mut u8,
        refCode: *mut u8,
        altMatches: *mut u8,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn copyBases(
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        srcOffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn revComp(
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qwordExtractBits(
        hash: u64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn hashRecExtractHashBits(
        rec: hashrec_t,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn bytesReadable(bytes: u64) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct seedPopRec_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_seedPopRec_t() {
    assert_eq!(
        ::std::mem::size_of::<seedPopRec_t>(),
        8usize,
        concat!("Size of: ", stringify!(seedPopRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<seedPopRec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(seedPopRec_t))
    );
}
impl seedPopRec_t {
    #[inline]
    pub fn slotOffset(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_slotOffset(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn bucketBin(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 22u8) as u64) }
    }
    #[inline]
    pub fn set_bucketBin(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn liftGroup(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 17u8) as u64) }
    }
    #[inline]
    pub fn set_liftGroup(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn liftCode(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(60usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_liftCode(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(60usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn extTable(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_extTable(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn automatic(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_automatic(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slotOffset: u64,
        bucketBin: u64,
        liftGroup: u64,
        liftCode: u64,
        extTable: u64,
        automatic: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 21u8, {
            let slotOffset: u64 = unsafe { ::std::mem::transmute(slotOffset) };
            slotOffset as u64
        });
        __bindgen_bitfield_unit.set(21usize, 22u8, {
            let bucketBin: u64 = unsafe { ::std::mem::transmute(bucketBin) };
            bucketBin as u64
        });
        __bindgen_bitfield_unit.set(43usize, 17u8, {
            let liftGroup: u64 = unsafe { ::std::mem::transmute(liftGroup) };
            liftGroup as u64
        });
        __bindgen_bitfield_unit.set(60usize, 2u8, {
            let liftCode: u64 = unsafe { ::std::mem::transmute(liftCode) };
            liftCode as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let extTable: u64 = unsafe { ::std::mem::transmute(extTable) };
            extTable as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let automatic: u64 = unsafe { ::std::mem::transmute(automatic) };
            automatic as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extIndexRec_t {
    pub start: u32,
    pub length: u32,
    pub offsetBits: u8,
}
#[test]
fn bindgen_test_layout_extIndexRec_t() {
    const UNINIT: ::std::mem::MaybeUninit<extIndexRec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extIndexRec_t>(),
        12usize,
        concat!("Size of: ", stringify!(extIndexRec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<extIndexRec_t>(),
        4usize,
        concat!("Alignment of ", stringify!(extIndexRec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extIndexRec_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(extIndexRec_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offsetBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(extIndexRec_t),
            "::",
            stringify!(offsetBits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeCompHashTableCtx_t {
    pub buf: *mut u8,
    pub bufBytes: ::std::os::raw::c_int,
    pub file: *mut FILE,
    pub bitLen: u64,
    pub bufStartBit: i64,
    pub bitsPend: u8,
    pub litPos: u64,
    pub extLitPos: u64,
    pub extTabRecs: u32,
    pub extTabRecsFilePos: u64,
    pub extendIdBits: u32,
    pub autoNulRecs: u64,
    pub autoPriRecs: u64,
    pub autoSecRecs: u64,
    pub specialRecs: u64,
    pub literalRecs: u64,
    pub chainPtrRecs: u64,
    pub chainEndRecs: u64,
    pub extLitRecs: u64,
    pub totalRecs: u64,
    pub autoNulBits: u64,
    pub autoPriBits: u64,
    pub autoSecBits: u64,
    pub specialBits: u64,
    pub literalBits: u64,
    pub chainPtrBits: u64,
    pub chainEndBits: u64,
    pub extLitBits: u64,
    pub totalBits: u64,
    pub miscBits: u64,
}
#[test]
fn bindgen_test_layout_writeCompHashTableCtx_t() {
    const UNINIT: ::std::mem::MaybeUninit<writeCompHashTableCtx_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<writeCompHashTableCtx_t>(),
        240usize,
        concat!("Size of: ", stringify!(writeCompHashTableCtx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<writeCompHashTableCtx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(writeCompHashTableCtx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufBytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(bufBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(bitLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufStartBit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(bufStartBit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitsPend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(bitsPend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).litPos) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(litPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extLitPos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extLitPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabRecs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extTabRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extTabRecsFilePos) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extTabRecsFilePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendIdBits) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extendIdBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoNulRecs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoNulRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoPriRecs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoPriRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoSecRecs) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoSecRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specialRecs) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(specialRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literalRecs) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(literalRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chainPtrRecs) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(chainPtrRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chainEndRecs) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(chainEndRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extLitRecs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extLitRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalRecs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(totalRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoNulBits) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoNulBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoPriBits) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoPriBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoSecBits) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(autoSecBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specialBits) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(specialBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literalBits) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(literalBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chainPtrBits) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(chainPtrBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chainEndBits) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(chainEndBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extLitBits) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(extLitBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalBits) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(totalBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miscBits) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(writeCompHashTableCtx_t),
            "::",
            stringify!(miscBits)
        )
    );
}
extern "C" {
    pub fn writeCompHashTableCtxOpen(
        ctx: *mut writeCompHashTableCtx_t,
        fileName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableAlignAndFlush(
        ctx: *mut writeCompHashTableCtx_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableClose(ctx: *mut writeCompHashTableCtx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableHeader(
        ctx: *mut writeCompHashTableCtx_t,
        cfgHdr: *mut hashTableHeader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableLiterals(
        ctx: *mut writeCompHashTableCtx_t,
        recs: *mut hashrec_t,
        numRecs: u64,
        litFlags: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableExtTabLiterals(
        ctx: *mut writeCompHashTableCtx_t,
        recs: *mut extend_hit_t,
        numRecs: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableLiteralsClose(
        ctx: *mut writeCompHashTableCtx_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableExtIndex(
        ctx: *mut writeCompHashTableCtx_t,
        extIndexRecs: *mut extIndexRec_t,
        numExtIndexRecs: u32,
        extTabRecs: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn writeCompHashTableAutoHits(
        ctx: *mut writeCompHashTableCtx_t,
        popRecs: *mut seedPopRec_t,
        numPopRecs: u32,
        maxExtendId: u32,
        extIndexRecs: *mut extIndexRec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decompHashTable(
        threads: ::std::os::raw::c_int,
        compBuf: *mut u8,
        compLen: u64,
        refBuf: *mut u8,
        refLen: u64,
        decompBuf: *mut *mut u8,
        decompLen: *mut u64,
        extendTableBuf: *mut *mut u8,
        extendTableLen: *mut u64,
        hashDigest: *mut u32,
        extTabDigest: *mut u32,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decompHashTableCtx_t {
    pub threads: ::std::os::raw::c_int,
    pub buf: *mut u8,
    pub bufBytes: i64,
    pub bufBits: i64,
    pub bitPos: i64,
    pub oldBitPos: i64,
    pub cfgHdr: hashTableHeader_t,
    pub hashTable: *mut hashrec_t,
    pub extendTable: *mut extend_hit_t,
    pub extIndexRecs: *mut extIndexRec_t,
    pub hashRecs: i64,
    pub extendRecs: i64,
    pub refBuf2Bit: *mut u8,
    pub refBases: i64,
    pub extendIdBits: u32,
    pub priCrcInit: *mut ::std::os::raw::c_void,
    pub secCrcInit: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_decompHashTableCtx_t() {
    const UNINIT: ::std::mem::MaybeUninit<decompHashTableCtx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<decompHashTableCtx_t>(),
        640usize,
        concat!("Size of: ", stringify!(decompHashTableCtx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<decompHashTableCtx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(decompHashTableCtx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(bufBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufBits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(bufBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(bitPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldBitPos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(oldBitPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfgHdr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(cfgHdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTable) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(hashTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendTable) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(extendTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extIndexRecs) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(extIndexRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashRecs) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(hashRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendRecs) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(extendRecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refBuf2Bit) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(refBuf2Bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refBases) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(refBases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendIdBits) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(extendIdBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priCrcInit) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(priCrcInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secCrcInit) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(decompHashTableCtx_t),
            "::",
            stringify!(secCrcInit)
        )
    );
}
extern "C" {
    pub fn slurpFile(name: *const ::std::os::raw::c_char, buffer: *mut *mut u8, bufLen: *mut u64);
}
extern "C" {
    pub fn dumpFile(name: *const ::std::os::raw::c_char, buffer: *mut u8, bufLen: u64);
}
extern "C" {
    pub fn decompAndWriteHashTable(
        refPath: *const ::std::os::raw::c_char,
        hashCmpPath: *const ::std::os::raw::c_char,
        hashBinPath: *const ::std::os::raw::c_char,
        extTabPath: *const ::std::os::raw::c_char,
        numThreads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
