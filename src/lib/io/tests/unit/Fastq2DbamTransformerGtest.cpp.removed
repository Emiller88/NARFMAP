#include "gtest/gtest.h"
#include "inttypes.h"
#include <numeric>

#include "io/Fastq2DbamTransformer.hpp"

TEST(Fastq2DbamTransformerTest, transformSequence)
{
  std::string dna = "ACGTNAACCGGTTNNGAT";
  const std::vector<uint8_t> sequence(dna.begin(), dna.end());
  const unsigned fastqOffset = 64; // alternately 33
  const std::vector<uint8_t> qualities = [&sequence,fastqOffset](){std::vector<uint8_t> q(sequence.size()); std::iota(q.begin(), q.end(), fastqOffset); return q;}();
  ASSERT_EQ(sequence.size(), qualities.size());
  std::vector<uint8_t> dbam(sequence.size());
  ASSERT_EQ(sequence.size(), dbam.size());
  dragenos::io::Fastq2DbamTransformer::transformSequence(sequence.data(), sequence.size(), qualities.data(), dbam.data(), fastqOffset, false, false);
  for (unsigned i = 0; sequence.size()  > i; ++i)
  {
    const auto d = dbam[i];
    const uint8_t bases[] = {'A','C','G','T'};
    const uint8_t db = bases[d & 3];
    const uint8_t expectedB = sequence[i] == 'N' ? 'G' : sequence[i];
    ASSERT_EQ(expectedB, db);
    const uint8_t dq = d >> 2;
    const uint8_t expectedQ = sequence[i] == 'N' ? fastqOffset : qualities[i];
    ASSERT_EQ(expectedQ, dq + fastqOffset);
  }
}

TEST(Fastq2DbamTransformerTest, transformSequencePerformance)
{
  const std::vector<uint8_t> sequence(1UL << 26, 'C');
  const std::vector<uint8_t> qualities(sequence.size(), 68);
  ASSERT_EQ(sequence.size(), qualities.size());
  const unsigned length = 125;
  std::vector<uint8_t> dbam(length, 0);
  for (unsigned int i = 0; sequence.size() + length -1 > i; ++i)
  {
    const uint8_t* const s = sequence.data() + i;
    const uint8_t* const q = qualities.data() + i;
    const unsigned fastqOffset = 64; // alternately 33
    dragenos::io::Fastq2DbamTransformer::transformSequence(s, length, q, dbam.data(), fastqOffset, false, false);
  }
}

