#ifndef _crc_hash_h
#define _crc_hash_h

#ifdef __cplusplus
extern "C" {
#endif

// Hashes a data buffer using a CRC polynomial of the same length, bit-by-bit.
// The same-length requirement makes the hash reversible.  No information is lost,
// and different data words are guaranteed to have different hashes.  This means
// that a key match can be confirmed by comparing the hash alone, or rather the
// portion not implicitly matched by use as address bits.
void* crcHashSlow(int bits, void const* poly, void const* data, void* hash);

// Return a data structure to be used with crcHash() for faster hashing.
// This function allocates the buffer, and ownership transfers to the caller.
void* crcHashInit(int bits, void const* poly);
// Optimized 64-bit version
void* crcHash64Init(int bits, void const* poly);

// Hash faster using a table of 256 remainders generated by crcHashInit()
void* crcHash(void* init, void const* data, void* hash);
// Optimized 64-bit version
void* crcHash64(void* init, void const* data, void* hash);

// This is a table of primitive CRC polynomials up to 128 bits long, with 16 polynomials
// per length, stored in byte arrays as:  CRC_POLYS[length][number][byte].
// As an argument to crcHash, CRC_POLYS[L][N] can be used, or even CRC_POLYS[L]
// to use the first polynomial of that length.  Or favorites can be copied elsewhere.
extern const unsigned char CRC_POLYS[129][16][16];
#ifdef __cplusplus
}  // extern "C"
#endif

#endif
